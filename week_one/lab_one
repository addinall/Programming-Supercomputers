- Which version of the Intel C Compiler are you using?

icc (ICC) 15.0.3 20150407
Copyright (C) 1985-2015 Intel Corporation.  All rights reserved.

- does man work?
ICC(1)                  Intel(R) C/C++ Compiler Options                 ICC(1)

Intel(R) C++ Compiler (ICC) Man Page Content

       icc - invokes the Intel(R) C Compiler

       icpc - invokes the Intel(R) C++ Compiler

- does the compiler work and produce code?

CSUi132@IPAccess ~/week_one/test1-code $ make
icc -sox -c test1.c
icc -sox -o test1 test1.o
CSUi132@IPAccess ~/week_one/test1-code $ ./test1
Hello World!
cc = 6.000000
sum = 1499998500000.000000
CSUi132@IPAccess ~/week_one/test1-code $ 

- add compiler information to object deck

CSUi132@IPAccess ~/week_one/test1-code $ strings -a test1 | grep comment
-?comment:Intel(R) C Intel(R) 64 Compiler XE for applications running on Intel(R) 64, Version 15.0.3.187 Build 20150407  : test1.c : -sox -c -defaultlib:libirc 
.comment

- play with the compiler options, file sizes produced etc....

CSUi132@IPAccess ~/week_one/test1-code $ ls -lh
total 64K
-rw-rw-r--. 1 CSUi132 CSUi132  163 Jun 27 02:25 Makefile
-rwxrwxr-x. 1 CSUi132 CSUi132  20K Jun 27 02:25 test1
-rw-rw-r--. 1 CSUi132 CSUi132 1.2K Jun 26 08:53 test1.c
-rw-rw-r--. 1 CSUi132 CSUi132  17K Jun 27 02:25 test1.i
-rw-rw-r--. 1 CSUi132 CSUi132 2.3K Jun 27 02:25 test1.o
-rw-rw-r--. 1 CSUi132 CSUi132  12K Jun 27 02:25 test1.s


- compile with debugging info
This was the output to stdout (stderr)

CSUi132@IPAccess ~/week_one/test1-code $ icc -g test1 test1.c
test1: In function `_start':
(.text+0x0): multiple definition of `_start'
/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/crt1.o:(.text+0x0): first defined here
test1: In function `_fini':
(.fini+0x0): multiple definition of `_fini'
/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/crti.o:(.fini+0x0): first defined here
test1:(.rodata+0x0): multiple definition of `_IO_stdin_used'
/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/crt1.o:(.rodata.cst4+0x0): first defined here
test1: In function `__data_start':
(.data+0x0): multiple definition of `__data_start'
/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/crt1.o:(.data+0x0): first defined here
test1:(.rodata+0x8): multiple definition of `__dso_handle'
/usr/lib/gcc/x86_64-redhat-linux/4.4.7/crtbegin.o:(.rodata+0x0): first defined here
test1: In function `_init':
(.init+0x0): multiple definition of `_init'
/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/crti.o:(.init+0x0): first defined here
/tmp/iccH6A0Bl.o: In function `main':
/home/CSUi132/week_one/test1-code/test1.c:19: multiple definition of `main'
test1:(.text+0xf0): first defined here
/usr/lib/gcc/x86_64-redhat-linux/4.4.7/crtend.o:(.dtors+0x0): multiple definition of `__DTOR_END__'
test1:(.dtors+0x8): first defined here
ld: warning: Cannot create .eh_frame_hdr section, --eh-frame-hdr ignored.
ld: error in test1(.eh_frame); no .eh_frame_hdr table will be created.


1: Add compiler options to generate vectorization reports showing the loops that were or were not vectorized.

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at test1.c(24,4)
   remark #15388: vectorization support: reference aa has aligned access   [ test1.c(25,7) ]
   remark #15412: vectorization support: streaming store was generated for aa.131   [ test1.c(25,7) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 2.000 
   remark #15478: estimated potential speedup: 1.990 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at test1.c(27,4)
   remark #15388: vectorization support: reference bb has aligned access   [ test1.c(28,7) ]
   remark #15412: vectorization support: streaming store was generated for bb.131   [ test1.c(28,7) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 2.000 
   remark #15478: estimated potential speedup: 2.490 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at test1.c(30,4)
   remark #15388: vectorization support: reference cc has aligned access   [ test1.c(31,7) ]
   remark #15412: vectorization support: streaming store was generated for cc.131   [ test1.c(31,7) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at test1.c(33,4)
   remark #15388: vectorization support: reference cc has aligned access   [ test1.c(34,7) ]
   remark #15388: vectorization support: reference aa has aligned access   [ test1.c(34,7) ]
   remark #15388: vectorization support: reference bb has aligned access   [ test1.c(34,7) ]
   remark #15412: vectorization support: streaming store was generated for cc.131   [ test1.c(34,7) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 2.400 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at test1.c(39,4)
   remark #15388: vectorization support: reference cc has aligned access   [ test1.c(40,7) ]
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 2.390 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================



2: Modify test1.c
 include an internal routine (double) add_internal((double) a, (double(b)) which returns (a + b).  
add another loop in the main program which calls add_internal() to perform the addition.
Investigate which optimisation levels (O0, O1, O2, O3) inline add_internal.
What effect does this have on the vectorization of this loop?
Investigate compiler options and compiler directives to force inlining or 
to inhibit inlining this call.
